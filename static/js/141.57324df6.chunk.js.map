{"version":3,"file":"static/js/141.57324df6.chunk.js","mappings":"qJACA,SAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,OAAS,wBAAwB,YAAc,8B,sFCStP,MAeA,EAfmCA,IAEjC,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,SAAQC,UACrBC,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CACNC,GAAIP,EACJG,UAAYK,GAAYA,EAAOC,SAAWC,EAAEC,OAASD,EAAEF,OAAQJ,SAAA,EAE/DF,EAAAA,EAAAA,KAAA,OAAKU,IAAKC,EAAQV,UAAWO,EAAEG,SAAU,IAAEd,EAAMe,SAE/C,E,qDCJV,EAR+BC,IAAsB,IAArB,QAAEC,EAAO,GAAEf,GAAIc,EAC7C,OACEV,EAAAA,EAAAA,MAAA,OAAKF,UAAWO,EAAEM,QAAQZ,SAAA,EACxBF,EAAAA,EAAAA,KAAA,OAAKU,IAAKK,EAAad,UAAWO,EAAEO,cAAe,IAAED,IACjD,E,iCCJV,MAAME,GAAcC,EAAAA,EAAAA,GAAiB,IAkB/BC,GAAsBC,EAAAA,EAAAA,GAAmD,CAAEC,KAAM,kBAA3DD,EAd2EN,IAAuB,IAAtB,aAAEQ,GAAcR,EACtH,OACEV,EAAAA,EAAAA,MAAA,QAAMmB,SAAUD,EAAanB,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,OAAAE,UACGqB,EAAAA,EAAAA,GAA0C,eAAgB,iBAAkB,CAACC,EAAAA,EAAeR,GAAc,eAG7GhB,EAAAA,EAAAA,KAAA,OAAAE,UACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,YAEL,IAyCX,EAvB+BuB,IAAgD,IAA/C,YAAEC,EAAW,aAAEC,EAAY,WAAEC,GAAYH,EACnEI,EAAUH,EAAYI,KAAKxB,IAC7BN,EAAAA,EAAAA,KAAC+B,EAAU,CAACnB,KAAMN,EAAOM,KAAMb,GAAIO,EAAOP,OAGxCiC,EAAWL,EAAaG,KAAKhB,IAC/Bd,EAAAA,EAAAA,KAACiC,EAAO,CAACnB,QAASA,EAAQA,QAASf,GAAIe,EAAQf,OAOjD,OACEI,EAAAA,EAAAA,MAAA,OAAKF,UAAWO,EAAEqB,QAAQ3B,SAAA,EACxBF,EAAAA,EAAAA,KAAA,OAAKC,UAAWO,EAAE0B,aAAahC,SAAE2B,KACjC7B,EAAAA,EAAAA,KAAA,OAAKC,UAAWO,EAAEwB,SAAS9B,SAAE8B,KAE7BhC,EAAAA,EAAAA,KAACkB,EAAmB,CAACI,SATJa,IACnBP,EAAWO,EAAOC,eAAe,MAS3B,E,wBCpCV,SAAeC,E,QAAAA,KACXC,EAAAA,EAAAA,KARmBC,IACZ,CACHb,YAAaa,EAAMC,aAAad,YAChCC,aAAcY,EAAMC,aAAab,gBAOjC,CAAEC,WAAYa,EAAAA,EAAQb,aAC1Bc,EAAAA,EAJJ,CAKEC,E,6ECxBF,IAAIC,EAA8BL,IACvB,CACHM,OAAQN,EAAMO,KAAKD,SAUpB,SAASH,EAAsDK,GAUlE,OAHqCT,EAAAA,EAAAA,IAChCM,EAA4B,CAAC,EADGN,EANqCzC,IACtE,IAAI,OAAEgD,KAAWG,GAAcnD,EAC/B,OAAKgD,GAEE7C,EAAAA,EAAAA,KAAC+C,EAAgB,IAAKC,KAFThD,EAAAA,EAAAA,KAACiD,EAAAA,GAAQ,CAAC5C,GAAI,UAE0B,GAMpE,C","sources":["webpack://react-1/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogsItems\":\"Dialogs_dialogsItems__zeEWD\",\"active\":\"Dialogs_active__t8cjl\",\"dialog\":\"Dialogs_dialog__htSTl\",\"messages\":\"Dialogs_messages__Cg2l+\",\"avatar\":\"Dialogs_avatar__J0Uvr\",\"messageIcon\":\"Dialogs_messageIcon__jpB2D\"};","import React, { FC } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport s from \"./../Dialogs.module.css\";\nimport avatar from \"./../../../img/avatar.png\";\n\ntype PropsType = {\n  name: string\n  id: number\n}\n\nconst DialogItem: FC<PropsType> = (props) => {\n  \n  let path = \"/dialogs/\" + props.id;\n  return (\n    <div className=\"center\">\n      <NavLink\n        to={path}\n        className={(dialog) => (dialog.isActive ? s.active : s.dialog)}\n      >\n        <img src={avatar} className={s.avatar} /> {props.name}\n      </NavLink>\n    </div>\n  );\n};\n// {s.dialog + \" \" + s.active}\nexport default DialogItem;\n","import React, { FC } from \"react\";\nimport s from \"./../Dialogs.module.css\";\nimport messageIcon from \"./../../../img/865771.png\";\n\ntype PropsType = {\n  message: string\n  id: number\n}\n\nconst Message: FC<PropsType> = ({ message, id }) => {\n  return (\n    <div className={s.message}>\n      <img src={messageIcon} className={s.messageIcon} /> {message}\n    </div>\n  );\n};\n\nexport default Message;\n","import React, { FC } from \"react\";\nimport s from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport { reduxForm, Field, InjectedFormProps } from \"redux-form\";\nimport { CreateField, FormControl } from \"../common/FormsControls/FormsControls\";\nimport { maxLengthCreator, requiredField } from \"../../utils/validators/validators\";\nimport { DialogsDataType, MessagesDataType } from \"../types/types\";\n\nconst maxLenght50 = maxLengthCreator(50);\n\ntype FormPropsType = {};\n\nconst AddMessageForm: FC<InjectedFormProps<AddMessageFormValuesType, FormPropsType> & FormPropsType> = ({ handleSubmit }) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        {CreateField<AddMessageFormValuesTypeKeys>(\"Message text\", \"newMessageText\", [requiredField, maxLenght50], \"textarea\")}\n        {/* <Field child=\"textarea\" component={FormControl} name={\"newMessageText\"} validate={[requiredField, maxLenght50]} /> */}\n      </div>\n      <div>\n        <button>Add</button>\n      </div>\n    </form>\n  )\n}\n\nconst AddMessageFormRedux = reduxForm<AddMessageFormValuesType, FormPropsType>({ form: 'AddMessageForm' })(AddMessageForm);\n\ntype AddMessageFormValuesType = {\n  newMessageText: string\n}\ntype AddMessageFormValuesTypeKeys = Extract<keyof AddMessageFormValuesType, string>;\n\n\ntype PropsType = {\n  dialogsData: Array<DialogsDataType>\n  messagesData: Array<MessagesDataType>\n  addMessage: (newMessageText: string) => void\n}\n\nconst Dialogs: FC<PropsType> = ({ dialogsData, messagesData, addMessage }) => {\n  let dialogs = dialogsData.map((dialog) => (\n    <DialogItem name={dialog.name} id={dialog.id} />\n  ));\n\n  let messages = messagesData.map((message) => (\n    <Message message={message.message} id={message.id} />\n  ));\n\n  let AddNewMessage = (values: { newMessageText: string }) => {\n    addMessage(values.newMessageText)\n  }\n\n  return (\n    <div className={s.dialogs}>\n      <div className={s.dialogsItems}>{dialogs}</div>\n      <div className={s.messages}>{messages}</div>\n\n      <AddMessageFormRedux onSubmit={AddNewMessage} />\n    </div>\n  );\n};\n\nexport default Dialogs;\n","import { actions } from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport { connect } from \"react-redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\nimport { DialogsDataType, MessagesDataType } from \"../types/types\";\nimport { AppStateType } from \"../../redux/redux-store\";\n\ntype MapStatePropsType = {\n    dialogsData: Array<DialogsDataType>\n    messagesData: Array<MessagesDataType>\n}\n\ntype MapDispatchPropsType = {\n    addMessage: (newMessageText: string) => void\n}\n\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        dialogsData: state.messagesPage.dialogsData,\n        messagesData: state.messagesPage.messagesData\n    }\n}\n\nexport default compose(\n    connect<MapStatePropsType, MapDispatchPropsType, null, AppStateType>(\n        mapStateToProps, \n        { addMessage: actions.addMessage }),\n    withAuthRedirect\n)(Dialogs);","import { Navigate } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { AppStateType } from \"../redux/redux-store\";\nimport React, { ComponentType } from \"react\";\n\nlet mapStateToPropsForRedirect = (state: AppStateType) => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\ntype MapStatePropsType = {\n    isAuth: boolean\n}\n\ntype DispatchPropsType = {}\n\nexport function withAuthRedirect<WCP extends JSX.IntrinsicAttributes>(WrappedComponent: React.ComponentType<WCP>) {\n    let RedirectComponent: React.FC<MapStatePropsType & DispatchPropsType> = (props) => {\n        let { isAuth, ...restProps } = props\n        if (!isAuth) return <Navigate to={'/login'} />\n\n        return <WrappedComponent {...restProps as unknown as WCP} />\n    }\n    let ConnectedAuthRedirectComponent = connect<MapStatePropsType, DispatchPropsType, WCP, AppStateType>\n        (mapStateToPropsForRedirect, {})(RedirectComponent);\n\n    return ConnectedAuthRedirectComponent;\n}\n\n// type MapStatePropsType = ReturnType<typeof mapStateToPropsForRedirect>\n\n// export const withAuthRedirect = (Component: ComponentType) => {\n//     class RedirectComponent extends React.Component<MapStatePropsType> {\n//         render() {\n//             if (!this.props.isAuth ) return <Navigate to={\"/login\"}/>;\n\n//             return <Component {...this.props}/>\n//         }\n//     }\n//     return connect(mapStateToPropsForRedirect)(RedirectComponent);\n// }"],"names":["props","path","id","_jsx","className","children","_jsxs","NavLink","to","dialog","isActive","s","active","src","avatar","name","_ref","message","messageIcon","maxLenght50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","handleSubmit","onSubmit","CreateField","requiredField","_ref2","dialogsData","messagesData","addMessage","dialogs","map","DialogItem","messages","Message","dialogsItems","values","newMessageText","compose","connect","state","messagesPage","actions","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","auth","WrappedComponent","restProps","Navigate"],"sourceRoot":""}