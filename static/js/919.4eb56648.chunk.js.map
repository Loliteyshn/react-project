{"version":3,"file":"static/js/919.4eb56648.chunk.js","mappings":"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","sources":["webpack://react-1/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://react-1/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://react-1/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/common/Preloader/Preloader.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__GSiZ2\",\"input\":\"MyPosts_input__7uVRv\",\"inputs\":\"MyPosts_inputs__-E79Y\",\"btn\":\"MyPosts_btn__v9RAD\"};","// extracted by mini-css-extract-plugin\nexport default {\"postImg\":\"Post_postImg__RhVPL\",\"flex\":\"Post_flex__Amv+A\"};","import style from \"./Post.module.css\"\nimport peachNumb from \"../../../../img/529peach_100978.png\";\nimport { PostType } from \"../../../types/types\";\nimport { FC } from \"react\";\n\ntype PropsType = {\n  post: PostType\n}\n\nconst Post: FC<PropsType> = ({ post }) => {\n  return (\n    <div className={style.flex}>\n      <img src={peachNumb} alt=\"\" className={style.postImg} />\n      {post.message} {post.likesCount}\n\n    </div>\n  );\n};\n\nexport default Post;\n","import React, { useState, useEffect, FC, ChangeEventHandler, ChangeEvent } from \"react\";\n\ntype PropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nconst ProfileStatus: FC<PropsType> = (props) => {\n    const [editMode, setEditMode] = useState(false);\n    const [status, setStatus] = useState(props.status);\n\n    useEffect( () => {\n        setStatus(props.status);\n    }, [props.status]);\n\n    let activateEditMode = () => {\n        setEditMode(true);\n    }\n\n    let deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n\n    let onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.target.value);\n    }\n\n    return <>\n        {!editMode &&\n            <div>\n                <b>Status: </b> <span onDoubleClick={activateEditMode}>{props.status || \"----\"}</span>\n            </div>\n        }\n\n        {editMode &&\n            <div>\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\n                    value={status} />\n            </div>\n        }\n    </>\n}\n\n\n\n\nexport default ProfileStatus;\n","import React, { FC } from \"react\";\nimport style from \"./MyPosts.module.css\";\nimport Post from \"./Post/Post\";\nimport ProfileStatus from \"../ProfileInfo/ProfileStatus\";\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\nimport { requiredField, maxLengthCreator } from \"../../../utils/validators/validators\";\nimport { CreateField, FormControl, getStringKeys } from \"../../common/FormsControls/FormsControls\";\nimport { PostType } from \"../../types/types\";\n\nconst maxLength10 = maxLengthCreator(10);\ntype FormPropsType = {};\ntype AddPostFormValuesType = {\n  newPostText: string\n}\ntype AddPostFormValuesTypeKeys = getStringKeys<AddPostFormValuesType>\n\nconst AddPostForm: FC<InjectedFormProps<AddPostFormValuesType, FormPropsType> & FormPropsType> = ({ handleSubmit }) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        {CreateField<AddPostFormValuesTypeKeys>(\"Post text\", \"newPostText\", [requiredField, maxLength10], \"textarea\")}\n        {/* <Field child=\"textarea\" component={FormControl} name={\"newPostText\"} validate={[requiredField, maxLength10]} placeholder=\"Post message\" /> */}\n      </div>\n      <div>\n        <button>Login</button>\n      </div>\n    </form>\n  )\n}\n\nconst AddPostReduxForm = reduxForm<AddPostFormValuesType, FormPropsType>({ form: 'AddPost' })(AddPostForm);\n\nexport type MapStatePropsType = {\n  posts: Array<PostType>\n  status: string\n}\nexport type MapDispatchPropsType = {\n  addPost: (text: string) => void\n  updateStatus: (status: string) => void\n}\n\nconst MyPosts: FC<MapStatePropsType & MapDispatchPropsType> = React.memo(({ posts, addPost, status, updateStatus }) => {\n  let postsElements = posts.map((post) => {\n    return (\n      <Post post={post} key={post.id} />\n    );\n  });\n\n  let AddPost = (formData: AddPostFormValuesType) => {\n    addPost(formData.newPostText);\n  }\n\n  return (\n    <div className={style.posts}>\n      <ProfileStatus status={status} updateStatus={updateStatus} />\n\n      <h3>My posts</h3>\n      <div className={style.flex}>\n        <AddPostReduxForm onSubmit={AddPost} />\n      </div>\n\n      <div>{postsElements}</div>\n    </div>\n  );\n});\n\n\nexport default MyPosts;\n","import { connect } from \"react-redux\";\nimport { actions, getStatus, updateStatus } from \"../../../redux/profile-reducer\";\nimport MyPosts, { MapDispatchPropsType, MapStatePropsType } from \"./MyPosts\"\nimport { AppStateType } from \"../../../redux/redux-store\";\n\n\n\n\nlet mapStateToProps = (state: AppStateType) => {\n    return {\n        posts: state.profilePage.posts,\n        status: state.profilePage.status\n    };\n};\n\nconst MyPostsContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps,\n    {\n        addPost: actions.addPost, updateStatus\n    }\n)(MyPosts);\n\nexport default MyPostsContainer;","// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"ProfileInfo_profile__XM2oU\",\"mainImg\":\"ProfileInfo_mainImg__ZzD1A\",\"mainPhoto\":\"ProfileInfo_mainPhoto__QU8TO\",\"contact\":\"ProfileInfo_contact__sQB8W\"};","import React from \"react\";\nimport preloader from \"../../../assets/images/Spin-1s-200px.svg\";\n\nlet Preloader = () => {\n\n  return <div style={{ backgroundColor: \"white\" }}>\n    <img src={preloader} />\n  </div>;\n};\n\nexport default Preloader;\n","import { InjectedFormProps, reduxForm } from \"redux-form\";\nimport { CreateField, getStringKeys } from \"../../common/FormsControls/FormsControls\";\nimport s from \"./ProfileInfo.module.css\";\nimport styles from \"../../common/FormsControls/FormsControls.module.css\"\nimport { FC } from \"react\";\nimport { ProfileType } from \"../../types/types\";\n\ntype PropsType = {\n    profile: ProfileType\n    error: any\n}\n// type ProfileDataFormValuesType = {\n//     fullName: string\n//     lookingForAJob: boolean\n//     lookingForAJobDescription: string\n//     aboutMe: string\n// }\ntype ProfileDataFormValuesTypeKeys = getStringKeys<ProfileType>\n\nconst ProfileDataForm:FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({ handleSubmit, profile, error }) => {\n    return <form onSubmit={handleSubmit}>\n        <div><button>Save</button> </div>\n        {error && <div className={styles.formSummaryError}>\n            {error}\n        </div>}\n        <h2>Full name: {CreateField<ProfileDataFormValuesTypeKeys>(\"Full name\", \"fullName\", [], \"input\")}</h2>\n        <div>\n            <b>Looking for a job: {CreateField<ProfileDataFormValuesTypeKeys>(\"\", \"lookingForAJob\", [], \"input\", { type: 'checkbox' })}</b>\n        </div>\n        <div>\n            <b>My professional skills: {CreateField<ProfileDataFormValuesTypeKeys>(\"My professional skills:\", \"lookingForAJobDescription\", [], \"textarea\")}</b>\n        </div>\n\n        <div>\n            <b>About me: {CreateField<ProfileDataFormValuesTypeKeys>(\"About me:\", \"aboutMe\", [], \"textarea\")}</b>\n        </div>\n        <div>\n            <b>Contacts: {Object.keys(profile.contacts).map(key => {\n                return <div key={key} className={s.contact}>\n                    <b>{key}: {CreateField(key, \"contacts.\" + key, [], \"input\")}</b>\n                </div>\n            })}</b>\n        </div>\n    </form>\n}\n\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({ form: 'edit-profile' })(ProfileDataForm)\n\n\nexport default ProfileDataFormReduxForm;","import s from \"./ProfileInfo.module.css\";\nimport mainImg from \"../../../img/peaches.jpeg\";\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport ProfileStatus from \"./ProfileStatus\";\nimport userPhoto from '../../../assets/images/gratis-png-empresario-iconos-de-computadora-avatar-avatar.png';\nimport { ChangeEvent, FC, useState } from \"react\";\nimport ProfileDataForm from \"./ProfileDataForm\";\nimport { ContactsType, ProfileType } from \"../../types/types\";\n\ntype InfoPropsType = {\n  savePhoto: (file: File) => void\n  profile: ProfileType | null\n  isOwner: boolean;\n  saveProfile: (profile: ProfileType) => void\n}\n\nconst ProfileInfo: FC<InfoPropsType> = ({ profile, savePhoto, isOwner, saveProfile }) => {\n  const [editMode, setEditMode] = useState(false);\n\n  if (!profile) {\n    return <Preloader />\n  }\n\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files?.length) {\n      savePhoto(e.target.files[0])\n    }\n  }\n\n  const onSubmit = (formData: ProfileType) => {\n    // @ts-ignore\n    saveProfile(formData).then(() => {\n      setEditMode(false);\n    });\n  }\n\n  return (\n    <div>\n      <img src={mainImg} alt=\"\" className={s.mainImg} />\n      <div className={s.profile}>\n        <img src={profile.photos.large || userPhoto} className={s.mainPhoto} alt=\"\" />\n        {isOwner && (<input type={\"file\"} onChange={e => onMainPhotoSelected(e)} />)}\n        {editMode\n          ? <ProfileDataForm initialValues={profile} onSubmit={onSubmit} profile={profile} error={undefined} />\n          : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)} />}\n      </div>\n      {/* <ProfileStatus status={props.status} updateStatus={props.updateStatus} /> */}\n    </div>\n  );\n};\n\ntype ProfileDataFormPropsType = {\n  profile: ProfileType\n  isOwner: boolean;\n  goToEditMode: () => void\n}\n\nconst ProfileData: FC<ProfileDataFormPropsType> = ({ profile, isOwner, goToEditMode }) => {\n  return <div>\n    {isOwner && (<div><button onClick={goToEditMode}>Edit</button> </div>)}\n    <h2>Full name: {profile.fullName}</h2>\n    <div>\n      <b>Looking for a job: {profile.lookingForAJob ? \"yes\" : \"no\"}</b>\n    </div>\n    {profile.lookingForAJob && (\n      <div>\n        <b>My professional skills: {profile.lookingForAJobDescription}</b>\n      </div>\n    )}\n    <div>\n      <b>About me: {profile.aboutMe}</b>\n    </div>\n    <div>\n      <b>Contacts: {Object.keys(profile.contacts).map(key => {\n        return <Contact\n          key={key} contactTitle={key}\n          contactValue={profile.contacts[key as keyof ContactsType]}\n        />\n      })}</b>\n    </div>\n  </div>\n}\n\ntype ContactPropsType = {\n  contactTitle: string\n  contactValue: string\n}\n\nconst Contact: FC<ContactPropsType> = ({ contactTitle, contactValue }) => {\n  return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\n}\n\nexport default ProfileInfo;\n","import { FC } from \"react\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport { ProfileType } from \"../types/types\";\n\ntype PropsType = {\n  savePhoto: (file: any) => void\n  profile: ProfileType | null\n  isOwner: boolean;\n  saveProfile: (profile: ProfileType) => void\n}\n\nconst Profile: FC<PropsType> = (props) => {\n  return (\n    <div>\n      <ProfileInfo savePhoto={props.savePhoto}\n        isOwner={props.isOwner}\n        profile={props.profile}\n        saveProfile={props.saveProfile} />\n      <MyPostsContainer />\n    </div>\n  );\n};\n\nexport default Profile;\n","import { Component, FC, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport Profile from \"./Profile\";\nimport { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile } from \"../../redux/profile-reducer\";\nimport { useParams, Navigate } from 'react-router-dom';\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\nimport { ProfileType } from \"../types/types\";\nimport { AppStateType } from \"../../redux/redux-store\";\nimport { withRouter } from \"../../hoc/withRouter\";\n\ntype MapStatePropsType = {\n    authorizedUserId: number | null\n    profile: ProfileType | null\n    status: string\n}\ntype MapDispatchPropsType = {\n    getUserProfile: (id: number) => void\n    getStatus: (id: number) => void\n    updateStatus: (status: string) => void\n    savePhoto: (file: any) => void\n    saveProfile: (profile: ProfileType) => void\n}\ntype OwnPropsType = {\n    isOwner: boolean\n}\n\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\n\nlet ProfileContainer: FC<PropsType> = (props) => {\n    let { userId } = useParams();\n\n    useEffect(() => {\n        let id = Number(userId);\n        if (!id) {\n            if (props.authorizedUserId) {\n                id = props.authorizedUserId;\n                if (!id) {\n                    window.location.href = '/login';\n                    // props.history.push('/login');\n                }\n            }\n\n        }\n        props.getUserProfile(id)\n        props.getStatus(id)\n\n    }, [userId, props.getUserProfile, props.getStatus]);\n\n    return (<div>\n        <Profile profile={props.profile}\n            isOwner={!userId}\n            savePhoto={props.savePhoto}\n            saveProfile={props.saveProfile}\n        />\n    </div>\n    );\n}\n\nlet mapStateToProps = (state: AppStateType) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n});\n\n\nexport default compose(\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>\n        (mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\n    withAuthRedirect\n)(ProfileContainer);","import { Navigate } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { AppStateType } from \"../redux/redux-store\";\nimport React, { ComponentType } from \"react\";\n\nlet mapStateToPropsForRedirect = (state: AppStateType) => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\ntype MapStatePropsType = {\n    isAuth: boolean\n}\n\ntype DispatchPropsType = {}\n\nexport function withAuthRedirect<WCP extends JSX.IntrinsicAttributes>(WrappedComponent: React.ComponentType<WCP>) {\n    let RedirectComponent: React.FC<MapStatePropsType & DispatchPropsType> = (props) => {\n        let { isAuth, ...restProps } = props\n        if (!isAuth) return <Navigate to={'/login'} />\n\n        return <WrappedComponent {...restProps as unknown as WCP} />\n    }\n    let ConnectedAuthRedirectComponent = connect<MapStatePropsType, DispatchPropsType, WCP, AppStateType>\n        (mapStateToPropsForRedirect, {})(RedirectComponent);\n\n    return ConnectedAuthRedirectComponent;\n}\n\n// type MapStatePropsType = ReturnType<typeof mapStateToPropsForRedirect>\n\n// export const withAuthRedirect = (Component: ComponentType) => {\n//     class RedirectComponent extends React.Component<MapStatePropsType> {\n//         render() {\n//             if (!this.props.isAuth ) return <Navigate to={\"/login\"}/>;\n\n//             return <Component {...this.props}/>\n//         }\n//     }\n//     return connect(mapStateToPropsForRedirect)(RedirectComponent);\n// }"],"names":["_ref","post","_jsxs","className","style","children","_jsx","src","peachNumb","alt","message","likesCount","props","editMode","setEditMode","useState","status","setStatus","useEffect","_Fragment","onDoubleClick","activateEditMode","onChange","e","target","value","autoFocus","onBlur","deactivateEditMode","updateStatus","maxLength10","maxLengthCreator","AddPostReduxForm","reduxForm","form","handleSubmit","onSubmit","CreateField","requiredField","React","_ref2","posts","addPost","postsElements","map","Post","id","ProfileStatus","flex","formData","newPostText","connect","state","profilePage","actions","MyPosts","Preloader","backgroundColor","preloader","profile","error","styles","formSummaryError","type","Object","keys","contacts","key","s","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","_ref3","savePhoto","saveProfile","mainImg","photos","large","userPhoto","_e$target$files","files","length","onMainPhotoSelected","ProfileDataForm","initialValues","then","undefined","ProfileInfo","MyPostsContainer","compose","authorizedUserId","auth","userId","getUserProfile","getStatus","withAuthRedirect","useParams","Number","window","location","href","Profile","mapStateToPropsForRedirect","isAuth","WrappedComponent","restProps","Navigate","to"],"sourceRoot":""}